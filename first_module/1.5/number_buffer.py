"""
Вам дается последовательность целых чисел и вам нужно ее обработать и
вывести на экран сумму первой пятерки чисел из этой последовательности,
затем сумму второй пятерки, и т. д.

Но последовательность не дается вам сразу целиком. С течением времени
к вам поступают её последовательные части. Например, сначала первые
три элемента, потом следующие шесть, потом следующие два и т. д.

Реализуйте класс Buffer, который будет накапливать в себе элементы
последовательности и выводить сумму пятерок последовательных элементов
по мере их накопления.

Одним из требований к классу является то, что он не должен хранить в себе
больше элементов, чем ему действительно необходимо, т. е. он не должен
хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.

Класс должен иметь следующий вид:
class Buffer:
    def __init__(self):
        # конструктор без аргументов

    def add(self, *a):
        # добавить следующую часть последовательности

    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в
        # порядке, в котором они были
        # добавлены
"""


class Buffer:
    def __init__(self):
        self.storage = []

    def add(self, *a):
        self.storage += list(a)

        # пока длинна массива > 5, выводим сумму 5к и обрезаем список
        while len(self.storage) >= 5:
            print(sum(self.storage[:5]))
            self.storage = self.storage[5:]

    def get_current_part(self):
        return self.storage


